//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma once
#define WANTDLLEXP
#ifdef WANTDLLEXP		//exportation dll
#define DLL  __declspec( dllexport )
#define EXTERNC extern "C"
#else
#define DLL		//standard
#define EXTERNC
#endif
#include <vector>
#include "Map.h"
#include "Player.h"
#include "GameStatus.h"
#include "../ImplementationStd/Position.h"

/*! \interface Game
* \brief interface du moteur du jeu
*
*/
	class DLL Game 
	{
		public:
			//virtual void getInstance()=0;
			virtual void addPlayers(std::vector<Player*> ptab)=0;
			virtual void addMap(Map* nmap)=0;
			virtual int getMapLongueur() = 0;
			virtual int getMapHauteur() = 0;
			virtual SquareType getSquareType(int x,int y) = 0;
			virtual int getCurrentPlayer() = 0;
			virtual void nextPlayer() = 0;
			virtual void setNbPlayers(int nb) = 0;
			virtual void setColorTab(Color c1,Color c2,Color c3,Color c4) = 0;
			virtual void setTeamTab(std::vector<int>& teamVec) = 0;
			virtual void setNbArtefactsToWin(int nb) = 0;
			virtual Color getColorTab(int i) = 0;
			virtual int getPlayerPosX(int playerNb) = 0;
			virtual int getPlayerPosY(int playerNb) = 0;
			virtual int getPlayerTeam(int playerNb) = 0;
			virtual std::vector<Position> getPlayersPosition() = 0;
			virtual std::vector<Position> getAsteroidsPosition() = 0;
			virtual int getPlayerNbArtefacts(int playerNb) = 0;
			virtual bool getPlayerPossesArtefact(int playerNb) = 0;
			virtual int getPlayerShotsRemaining(int playerNb) = 0;
			virtual void doAction(double posx,double posy) = 0;
			virtual Spaceship* getCurrentSpaceship()=0;
			virtual Square* getMapSquare(int posx,int posy) = 0;
			virtual Player* getPlayer(int i) = 0;
			virtual void changeCurrentStatus(GameStatusType t) = 0;
			virtual GameStatusType getCurrentStatus() = 0;
			virtual void shootPlayer(int playerNb) = 0;
			virtual std::vector<Position> getLastShootTrace() = 0;
			virtual SpaceshipType getPlayerSpaceshipType(int playerNb) = 0;
			virtual std::vector<int> getAccessibleSquares(int diceNb) = 0;
			virtual bool isGameEnded() = 0;
			virtual int getGameWinner() = 0;
			virtual bool isValidMap() = 0;

	


	};



