// ------------------------------------------------------------------------------
//  <auto-generated>
//      Ce code a ete genere par un generateur de test code de l'interface utilisateur.
//      Version : 10.0.0.0 
//
//      Les modifications apportees a ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//      le code est regenere.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestProject_SpaceBattleView
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Generateur de test code de l\'interface utilisateur", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// TestInterfaceStandard - Utilisez 'TestInterfaceStandardParams' pour passer les parametres dans cette methode.
        /// </summary>
        public void TestInterfaceStandard()
        {
            #region Variable Declarations
            WinEdit uINomEdit = this.UIDebugWindow.UIItemWindow.UISpaceBattleViewexeListItem.UINomEdit;
            WinList uIBureauList = this.UIProgramManagerWindow.UIFolderViewWindow.UIBureauList;
            WpfComboBox uIComboBoxPlayerNbComboBox = this.UIPlayerSelectionWindow.UIComboBoxPlayerNbComboBox;
            WpfButton uIStartButton = this.UIPlayerSelectionWindow.UIStartButton;
            WpfComboBox uIComboBoxArtefactsComboBox = this.UIPlayerSelectionWindow.UIComboBoxArtefactsComboBox;
            WpfButton uIButtonDicesP3Button = this.UIPlayerSelectionWindow.UIButtonDicesP3Button;
            WpfButton uIButtonDicesP4Button = this.UIPlayerSelectionWindow.UIButtonDicesP4Button;
            WpfButton uIButtonDicesP2Button = this.UIPlayerSelectionWindow.UIButtonDicesP2Button;
            WpfButton uIButtonDicesP1Button = this.UIPlayerSelectionWindow.UIButtonDicesP1Button;
            WpfImage uIImageMusicImage = this.UIMainGameWindow.UIImageMusicImage;
            WpfButton uIButtonRollDicesButton = this.UIMainGameWindow.UIButtonRollDicesButton;
            WpfButton uIMoveButton = this.UIMainGameWindow.UIMoveButton;
            WpfImage uIImageStars2Image = this.UIMainGameWindow.UIImageStars2Image;
            WpfButton uIShootButton = this.UIMainGameWindow.UIShootButton;
            WinWindow uIMainGameWindow1 = this.UIMainGameWindow1;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WpfButton uIFermerButton = this.UIPlayerSelectionWindow.UIPlayerSelectionTitleBar.UIFermerButton;
            #endregion

            // Double-clic 'Nom' zone de texte
            Mouse.DoubleClick(uINomEdit, new Point(72, 10));

            // Clic 'Bureau' zone de liste
            Mouse.Click(uIBureauList, new Point(743, 95));

            // Double-clic 'Nom' zone de texte
            Mouse.DoubleClick(uINomEdit, new Point(55, 8));

            // Selectionner '4' dans 'comboBoxPlayerNb' zone de liste deroulante
            uIComboBoxPlayerNbComboBox.SelectedItem = this.TestInterfaceStandardParams.UIComboBoxPlayerNbComboBoxSelectedItem;

            // Clic 'Start' bouton
            Mouse.Click(uIStartButton, new Point(27, 19));

            // Selectionner '2' dans 'comboBoxArtefacts' zone de liste deroulante
            uIComboBoxArtefactsComboBox.SelectedItem = this.TestInterfaceStandardParams.UIComboBoxArtefactsComboBoxSelectedItem;

            // Clic 'Start' bouton
            Mouse.Click(uIStartButton, new Point(40, 16));

            // Selectionner '2' dans 'comboBoxPlayerNb' zone de liste deroulante
            uIComboBoxPlayerNbComboBox.SelectedItem = this.TestInterfaceStandardParams.UIComboBoxPlayerNbComboBoxSelectedItem1;

            // Clic 'Start' bouton
            Mouse.Click(uIStartButton, new Point(63, 19));

            // Selectionner '4' dans 'comboBoxPlayerNb' zone de liste deroulante
            uIComboBoxPlayerNbComboBox.SelectedItem = this.TestInterfaceStandardParams.UIComboBoxPlayerNbComboBoxSelectedItem2;

            // Clic 'buttonDicesP3' bouton
            Mouse.Click(uIButtonDicesP3Button, new Point(38, 24));

            // Clic 'buttonDicesP4' bouton
            Mouse.Click(uIButtonDicesP4Button, new Point(28, 9));

            // Selectionner '2' dans 'comboBoxPlayerNb' zone de liste deroulante
            uIComboBoxPlayerNbComboBox.SelectedItem = this.TestInterfaceStandardParams.UIComboBoxPlayerNbComboBoxSelectedItem3;

            // Clic 'buttonDicesP2' bouton
            Mouse.Click(uIButtonDicesP2Button, new Point(19, 10));

            // Clic 'buttonDicesP1' bouton
            Mouse.Click(uIButtonDicesP1Button, new Point(26, 15));

            // Clic 'Start' bouton
            Mouse.Click(uIStartButton, new Point(45, 23));

            // Clic 'imageMusic' image
            Mouse.Click(uIImageMusicImage, new Point(6, 8));

            // Clic 'imageMusic' image
            Mouse.Click(uIImageMusicImage, new Point(6, 8));

            // Clic 'buttonRollDices' bouton
            Mouse.Click(uIButtonRollDicesButton, new Point(19, 20));

            // Clic 'Move' bouton
            Mouse.Click(uIMoveButton, new Point(29, 19));

            // Clic 'imageStars2' image
            Mouse.Click(uIImageStars2Image, new Point(246, 421));

            // Clic 'buttonRollDices' bouton
            Mouse.Click(uIButtonRollDicesButton, new Point(22, 22));

            // Clic 'Move' bouton
            Mouse.Click(uIMoveButton, new Point(24, 11));

            // Clic 'imageStars2' image
            Mouse.Click(uIImageStars2Image, new Point(157, 251));

            // Clic 'buttonRollDices' bouton
            Mouse.Click(uIButtonRollDicesButton, new Point(32, 17));

            // Clic 'Shoot' bouton
            Mouse.Click(uIShootButton, new Point(34, 10));

            // Clic 'imageStars2' image
            Mouse.Click(uIImageStars2Image, new Point(308, 292));

            // Clic 'buttonRollDices' bouton
            Mouse.Click(uIButtonRollDicesButton, new Point(18, 31));

            // Clic 'Move' bouton
            Mouse.Click(uIMoveButton, new Point(19, 13));

            // Clic 'imageStars2' image
            Mouse.Click(uIImageStars2Image, new Point(-1, 44));

            // Clic 'buttonRollDices' bouton
            Mouse.Click(uIButtonRollDicesButton, new Point(29, 30));

            // Clic 'Shoot' bouton
            Mouse.Click(uIShootButton, new Point(35, 13));

            // Clic 'imageStars2' image
            Mouse.Click(uIImageStars2Image, new Point(243, 316));

            // Clic 'buttonRollDices' bouton
            Mouse.Click(uIButtonRollDicesButton, new Point(33, 27));

            // Clic 'Move' bouton
            Mouse.Click(uIMoveButton, new Point(29, 8));

            // Clic 'MainGame' fenetre
            Mouse.Click(uIMainGameWindow1, new Point(137, 471));

            // Clic 'buttonRollDices' bouton
            Mouse.Click(uIButtonRollDicesButton, new Point(14, 23));

            // Clic 'Shoot' bouton
            Mouse.Click(uIShootButton, new Point(36, 10));

            // Clic 'imageStars2' image
            Mouse.Click(uIImageStars2Image, new Point(131, 341));

            // Clic 'buttonRollDices' bouton
            Mouse.Click(uIButtonRollDicesButton, new Point(23, 31));

            // Clic 'Move' bouton
            Mouse.Click(uIMoveButton, new Point(37, 13));

            // Clic 'imageStars2' image
            Mouse.Click(uIImageStars2Image, new Point(209, 258));

            // Clic 'buttonRollDices' bouton
            Mouse.Click(uIButtonRollDicesButton, new Point(30, 30));

            // Clic 'Shoot' bouton
            Mouse.Click(uIShootButton, new Point(34, 19));

            // Clic 'Move' bouton
            Mouse.Click(uIMoveButton, new Point(16, 17));

            // Clic 'imageStars2' image
            Mouse.Click(uIImageStars2Image, new Point(326, 222));

            // Clic 'buttonRollDices' bouton
            Mouse.Click(uIButtonRollDicesButton, new Point(33, 26));

            // Clic 'Move' bouton
            Mouse.Click(uIMoveButton, new Point(28, 15));

            // Clic 'imageStars2' image
            Mouse.Click(uIImageStars2Image, new Point(25, 426));

            // Clic 'OK' bouton
            Mouse.Click(uIOKButton, new Point(36, 11));

            // Clic 'Fermer' bouton
            Mouse.Click(uIFermerButton, new Point(35, 14));
        }
        
        #region Properties
        public virtual TestInterfaceStandardParams TestInterfaceStandardParams
        {
            get
            {
                if ((this.mTestInterfaceStandardParams == null))
                {
                    this.mTestInterfaceStandardParams = new TestInterfaceStandardParams();
                }
                return this.mTestInterfaceStandardParams;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIPlayerSelectionWindow UIPlayerSelectionWindow
        {
            get
            {
                if ((this.mUIPlayerSelectionWindow == null))
                {
                    this.mUIPlayerSelectionWindow = new UIPlayerSelectionWindow();
                }
                return this.mUIPlayerSelectionWindow;
            }
        }
        
        public UIMainGameWindow UIMainGameWindow
        {
            get
            {
                if ((this.mUIMainGameWindow == null))
                {
                    this.mUIMainGameWindow = new UIMainGameWindow();
                }
                return this.mUIMainGameWindow;
            }
        }
        
        public UIMainGameWindow1 UIMainGameWindow1
        {
            get
            {
                if ((this.mUIMainGameWindow1 == null))
                {
                    this.mUIMainGameWindow1 = new UIMainGameWindow1();
                }
                return this.mUIMainGameWindow1;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private TestInterfaceStandardParams mTestInterfaceStandardParams;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIPlayerSelectionWindow mUIPlayerSelectionWindow;
        
        private UIMainGameWindow mUIMainGameWindow;
        
        private UIMainGameWindow1 mUIMainGameWindow1;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    /// <summary>
    /// Parametres a passer dans 'TestInterfaceStandard'
    /// </summary>
    [GeneratedCode("Generateur de test code de l\'interface utilisateur", "10.0.30319.1")]
    public class TestInterfaceStandardParams
    {
        
        #region Fields
        /// <summary>
        /// Selectionner '4' dans 'comboBoxPlayerNb' zone de liste deroulante
        /// </summary>
        public string UIComboBoxPlayerNbComboBoxSelectedItem = "4";
        
        /// <summary>
        /// Selectionner '2' dans 'comboBoxArtefacts' zone de liste deroulante
        /// </summary>
        public string UIComboBoxArtefactsComboBoxSelectedItem = "2";
        
        /// <summary>
        /// Selectionner '2' dans 'comboBoxPlayerNb' zone de liste deroulante
        /// </summary>
        public string UIComboBoxPlayerNbComboBoxSelectedItem1 = "2";
        
        /// <summary>
        /// Selectionner '4' dans 'comboBoxPlayerNb' zone de liste deroulante
        /// </summary>
        public string UIComboBoxPlayerNbComboBoxSelectedItem2 = "4";
        
        /// <summary>
        /// Selectionner '2' dans 'comboBoxPlayerNb' zone de liste deroulante
        /// </summary>
        public string UIComboBoxPlayerNbComboBoxSelectedItem3 = "2";
        #endregion
    }
    
    [GeneratedCode("Generateur de test code de l\'interface utilisateur", "10.0.30319.1")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Criteres de recherche 
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Generateur de test code de l\'interface utilisateur", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Criteres de recherche 
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Vue d’elements";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UISpaceBattleViewexeListItem UISpaceBattleViewexeListItem
        {
            get
            {
                if ((this.mUISpaceBattleViewexeListItem == null))
                {
                    this.mUISpaceBattleViewexeListItem = new UISpaceBattleViewexeListItem(this);
                }
                return this.mUISpaceBattleViewexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISpaceBattleViewexeListItem mUISpaceBattleViewexeListItem;
        #endregion
    }
    
    [GeneratedCode("Generateur de test code de l\'interface utilisateur", "10.0.30319.1")]
    public class UISpaceBattleViewexeListItem : WinListItem
    {
        
        public UISpaceBattleViewexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Criteres de recherche 
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SpaceBattleView.exe";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINomEdit
        {
            get
            {
                if ((this.mUINomEdit == null))
                {
                    this.mUINomEdit = new WinEdit(this);
                    #region Criteres de recherche 
                    this.mUINomEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Nom";
                    this.mUINomEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINomEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINomEdit;
        #endregion
    }
    
    [GeneratedCode("Generateur de test code de l\'interface utilisateur", "10.0.30319.1")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Criteres de recherche 
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("Generateur de test code de l\'interface utilisateur", "10.0.30319.1")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Criteres de recherche 
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinList UIBureauList
        {
            get
            {
                if ((this.mUIBureauList == null))
                {
                    this.mUIBureauList = new WinList(this);
                    #region Criteres de recherche 
                    this.mUIBureauList.SearchProperties[WinList.PropertyNames.Name] = "Bureau";
                    this.mUIBureauList.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIBureauList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIBureauList;
        #endregion
    }
    
    [GeneratedCode("Generateur de test code de l\'interface utilisateur", "10.0.30319.1")]
    public class UIPlayerSelectionWindow : WpfWindow
    {
        
        public UIPlayerSelectionWindow()
        {
            #region Criteres de recherche 
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Player Selection";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Player Selection");
            #endregion
        }
        
        #region Properties
        public WpfComboBox UIComboBoxPlayerNbComboBox
        {
            get
            {
                if ((this.mUIComboBoxPlayerNbComboBox == null))
                {
                    this.mUIComboBoxPlayerNbComboBox = new WpfComboBox(this);
                    #region Criteres de recherche 
                    this.mUIComboBoxPlayerNbComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "comboBoxPlayerNb";
                    this.mUIComboBoxPlayerNbComboBox.WindowTitles.Add("Player Selection");
                    #endregion
                }
                return this.mUIComboBoxPlayerNbComboBox;
            }
        }
        
        public WpfButton UIStartButton
        {
            get
            {
                if ((this.mUIStartButton == null))
                {
                    this.mUIStartButton = new WpfButton(this);
                    #region Criteres de recherche 
                    this.mUIStartButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "buttonStart";
                    this.mUIStartButton.WindowTitles.Add("Player Selection");
                    #endregion
                }
                return this.mUIStartButton;
            }
        }
        
        public WpfComboBox UIComboBoxArtefactsComboBox
        {
            get
            {
                if ((this.mUIComboBoxArtefactsComboBox == null))
                {
                    this.mUIComboBoxArtefactsComboBox = new WpfComboBox(this);
                    #region Criteres de recherche 
                    this.mUIComboBoxArtefactsComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "comboBoxArtefacts";
                    this.mUIComboBoxArtefactsComboBox.WindowTitles.Add("Player Selection");
                    #endregion
                }
                return this.mUIComboBoxArtefactsComboBox;
            }
        }
        
        public WpfButton UIButtonDicesP3Button
        {
            get
            {
                if ((this.mUIButtonDicesP3Button == null))
                {
                    this.mUIButtonDicesP3Button = new WpfButton(this);
                    #region Criteres de recherche 
                    this.mUIButtonDicesP3Button.SearchProperties[WpfButton.PropertyNames.AutomationId] = "buttonDicesP3";
                    this.mUIButtonDicesP3Button.WindowTitles.Add("Player Selection");
                    #endregion
                }
                return this.mUIButtonDicesP3Button;
            }
        }
        
        public WpfButton UIButtonDicesP4Button
        {
            get
            {
                if ((this.mUIButtonDicesP4Button == null))
                {
                    this.mUIButtonDicesP4Button = new WpfButton(this);
                    #region Criteres de recherche 
                    this.mUIButtonDicesP4Button.SearchProperties[WpfButton.PropertyNames.AutomationId] = "buttonDicesP4";
                    this.mUIButtonDicesP4Button.WindowTitles.Add("Player Selection");
                    #endregion
                }
                return this.mUIButtonDicesP4Button;
            }
        }
        
        public WpfButton UIButtonDicesP2Button
        {
            get
            {
                if ((this.mUIButtonDicesP2Button == null))
                {
                    this.mUIButtonDicesP2Button = new WpfButton(this);
                    #region Criteres de recherche 
                    this.mUIButtonDicesP2Button.SearchProperties[WpfButton.PropertyNames.AutomationId] = "buttonDicesP2";
                    this.mUIButtonDicesP2Button.WindowTitles.Add("Player Selection");
                    #endregion
                }
                return this.mUIButtonDicesP2Button;
            }
        }
        
        public WpfButton UIButtonDicesP1Button
        {
            get
            {
                if ((this.mUIButtonDicesP1Button == null))
                {
                    this.mUIButtonDicesP1Button = new WpfButton(this);
                    #region Criteres de recherche 
                    this.mUIButtonDicesP1Button.SearchProperties[WpfButton.PropertyNames.AutomationId] = "buttonDicesP1";
                    this.mUIButtonDicesP1Button.WindowTitles.Add("Player Selection");
                    #endregion
                }
                return this.mUIButtonDicesP1Button;
            }
        }
        
        public UIPlayerSelectionTitleBar UIPlayerSelectionTitleBar
        {
            get
            {
                if ((this.mUIPlayerSelectionTitleBar == null))
                {
                    this.mUIPlayerSelectionTitleBar = new UIPlayerSelectionTitleBar(this);
                }
                return this.mUIPlayerSelectionTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mUIComboBoxPlayerNbComboBox;
        
        private WpfButton mUIStartButton;
        
        private WpfComboBox mUIComboBoxArtefactsComboBox;
        
        private WpfButton mUIButtonDicesP3Button;
        
        private WpfButton mUIButtonDicesP4Button;
        
        private WpfButton mUIButtonDicesP2Button;
        
        private WpfButton mUIButtonDicesP1Button;
        
        private UIPlayerSelectionTitleBar mUIPlayerSelectionTitleBar;
        #endregion
    }
    
    [GeneratedCode("Generateur de test code de l\'interface utilisateur", "10.0.30319.1")]
    public class UIPlayerSelectionTitleBar : WpfTitleBar
    {
        
        public UIPlayerSelectionTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Criteres de recherche 
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("Player Selection");
            #endregion
        }
        
        #region Properties
        public WpfButton UIFermerButton
        {
            get
            {
                if ((this.mUIFermerButton == null))
                {
                    this.mUIFermerButton = new WpfButton(this);
                    #region Criteres de recherche 
                    this.mUIFermerButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Close";
                    this.mUIFermerButton.WindowTitles.Add("Player Selection");
                    #endregion
                }
                return this.mUIFermerButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIFermerButton;
        #endregion
    }
    
    [GeneratedCode("Generateur de test code de l\'interface utilisateur", "10.0.30319.1")]
    public class UIMainGameWindow : WpfWindow
    {
        
        public UIMainGameWindow()
        {
            #region Criteres de recherche 
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainGame";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainGame");
            #endregion
        }
        
        #region Properties
        public WpfImage UIImageMusicImage
        {
            get
            {
                if ((this.mUIImageMusicImage == null))
                {
                    this.mUIImageMusicImage = new WpfImage(this);
                    #region Criteres de recherche 
                    this.mUIImageMusicImage.SearchProperties[WpfImage.PropertyNames.AutomationId] = "imageMusic";
                    this.mUIImageMusicImage.WindowTitles.Add("MainGame");
                    #endregion
                }
                return this.mUIImageMusicImage;
            }
        }
        
        public WpfButton UIButtonRollDicesButton
        {
            get
            {
                if ((this.mUIButtonRollDicesButton == null))
                {
                    this.mUIButtonRollDicesButton = new WpfButton(this);
                    #region Criteres de recherche 
                    this.mUIButtonRollDicesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "buttonRollDices";
                    this.mUIButtonRollDicesButton.WindowTitles.Add("MainGame");
                    #endregion
                }
                return this.mUIButtonRollDicesButton;
            }
        }
        
        public WpfButton UIMoveButton
        {
            get
            {
                if ((this.mUIMoveButton == null))
                {
                    this.mUIMoveButton = new WpfButton(this);
                    #region Criteres de recherche 
                    this.mUIMoveButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "buttonMakeAMove";
                    this.mUIMoveButton.WindowTitles.Add("MainGame");
                    #endregion
                }
                return this.mUIMoveButton;
            }
        }
        
        public WpfImage UIImageStars2Image
        {
            get
            {
                if ((this.mUIImageStars2Image == null))
                {
                    this.mUIImageStars2Image = new WpfImage(this);
                    #region Criteres de recherche 
                    this.mUIImageStars2Image.SearchProperties[WpfImage.PropertyNames.AutomationId] = "imageStars2";
                    this.mUIImageStars2Image.WindowTitles.Add("MainGame");
                    #endregion
                }
                return this.mUIImageStars2Image;
            }
        }
        
        public WpfButton UIShootButton
        {
            get
            {
                if ((this.mUIShootButton == null))
                {
                    this.mUIShootButton = new WpfButton(this);
                    #region Criteres de recherche 
                    this.mUIShootButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "buttonShoot";
                    this.mUIShootButton.WindowTitles.Add("MainGame");
                    #endregion
                }
                return this.mUIShootButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIImageMusicImage;
        
        private WpfButton mUIButtonRollDicesButton;
        
        private WpfButton mUIMoveButton;
        
        private WpfImage mUIImageStars2Image;
        
        private WpfButton mUIShootButton;
        #endregion
    }
    
    [GeneratedCode("Generateur de test code de l\'interface utilisateur", "10.0.30319.1")]
    public class UIMainGameWindow1 : WinWindow
    {
        
        public UIMainGameWindow1()
        {
            #region Criteres de recherche 
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MainGame";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainGame");
            #endregion
        }
    }
    
    [GeneratedCode("Generateur de test code de l\'interface utilisateur", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Criteres de recherche 
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Criteres de recherche 
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
